/////////////////////////////////////////
// unit DOSPipe.pas
// Author: Stephane Grobety <grobety@fulgan.com>
// Creation date: 10/12/99
// Version: 1.5
//
// Description:
//  DOSPipe is a unit that eases the use of a feature of console commands
//  (including DOS program but also JAVA console progs, CGI executables and such).
//  One question that often surface on the newsgroups is: "How do I get the result of
//  a net use... command" or similar questions. The easy answer is: "redirect the
//  output of the function to a text file and parse it". Sadly this answer is
//  not the best one can do. In the case of CGI executables, in particular,
//  it is often necessary to parse the output of a console application before has
//  terminated. Sometimes, you even need to INPUT commands to the program
//  When it asks for it.
//   The answer to that is a very old (but powerfull) functionality of the console
//  that originated in the old UNIX world and made its way into DOS 1.0:
//  The Input/output pipes. Sadly, this functionality has been ignored by developpers
//  ever since we stoped wondering what that <#include StdIO.h> directive was in our old
//  C programs...
//
//  So, this unit contains several functions that interface with the win32 equivalents
//  of the I/O pipes redirectory and allow you to launch console program, parse their
//  output as they are generated, send them input as needed and terminate them,
//  if necessary. As a bonus, the curious-minded could have a look at how it is done...
//
//  Note: I have the ancestor of this unit to create an IDE for a web-centric scripting
//  language written entirely in Java: Weble (http://www.research.digital.com/SRC/WebL/)
//  If you are interested in this editor (binary code only, sorry...) go to
//  www.fulgan.com/webl
//
//
//  ============================
//  Version history
//  ============================
//
//
//  1.0 : - First public release
//  1.1 : - Corrected bug in process termination: the process must be opened
//          with OpenProcess and TERMINATE_PROCESS right in order to work.
//        - Added the ability to create the new process as a different user.
//  1.2 : - Added optional functionality: start the process as a diferent user.
//  1.3 : - Added automatic building of enviromenet from CR+LF strings.
//        - Added a process information parameter to the callback function to
//          allow direct interraction with the child process.
//        - Added the CREATE_NEW_PROCESS_GROUP option to CreateProcess and
//          CreateProcessAsUser
//  1.4 : - Modified to accept custom enviromenet string (passed as TStringList).
//        - Some changes so it would work properly when used to spawn CGI applications.
//  1.5 : - Bug fix by Michal Prusk: GetExitCodeProcess takes a process handle, not a process ID
//
//  ============================
//  ToDo List
//  ============================
//


unit DOSPipes;

interface

uses windows, Classes;

const

  // Standard Pipe buffer size. This is not really important as the system will
  // increase the buffer size if needed so no overfow should happend here
  PIPE_BUFFER_SIZE = 4096;


  // How much time to wait when a termination signal has been sent to the
  // process before sending a harder signal
  TERMINATE_TIMEOUT = 2000; // Two sec default

type
  // IO Pipe
  TIOPipe = record
    hRead,
    hWrite: DWORD;
  end;

  // Standard IO Pipes
  TStdIO = record
    stdIn,
    stdOut,
    stdError: TIOPipe;
  end;


  // CallBack function for the WatchProcessUntillOver function.
  // Output is the last read Buffer of the hosted prog. It is not necessarily a full line.
  // Input is an empty string. Fill it with whatever you want to pass to the program.
  // Terminate is a boolean set to false. If you want to terminate the program, set it to true.
  //  The last time the functoion will be called, it may be possible that this vaiable is
  //  already set to true. This indicates that the program already terminated and that
  //  the callback just have the last output from it.
  // UserData is a user-defined DWORD. Use this if you are multi-threading several
  //  programs and use the same callback for all of them (great for CGI HTTP servers).
  //  You can also use it to pass a simple data between two calls of the function (like a timeout
  //  counter, for example)
  TPipeLoopFunc = procedure(Output: string; var input: string; var terminate: Boolean; const PI: TProcessInformation; var UserData: DWord);

function CreateStdIOPipe(var StdIo: TStdIO): boolean;
procedure CloseStdIOPipe(Var StdIO: TStdIO);
function PipeExec(CommandLine, Path: String; EnvironementStrings: PChar; var StdIO: TStdIO; UserToken: THandle; ShowWindow: DWORD = SW_HIDE): TProcessInformation;
Function ReadPipe(StdIo: TStdIO): string;
function WritePipe(StdIo: TStdIO; const Data: AnsiString): DWORD;
function ReadError(StdIo: TStdIO): string;
function WatchProcessUntillOver(CommandLine, Path, InitialInput: string; Environement: TStrings; Callback: TPipeLoopFunc; UserData: DWORD; UserToken: THandle; ShowWindow: DWORD = SW_HIDE): DWORD;


implementation

uses SysUtils, messages;

// CreateStdIOPipe: Creates a set of pipes for redirecting the std IO pipes of
// the hosted process.
// The handle returned by CreatePipe are not inheritable (cannot be used by child
// processes) so we must recreate each of them with the inheritable flag set to
// true before we can use them with CreateProcess

function CreateStdIOPipe(var StdIo: TStdIO): boolean;
  function CreateIOPipe(Var IOPipe: TIOPipe): boolean;
  begin
    // Create the pipe
    result := CreatePipe( IOPipe.hRead, IOPipe.hWrite, nil, PIPE_BUFFER_SIZE);
    // recreate the handles, this time with the "inheritable" flag
    if result then
      result := DuplicateHandle(GetCurrentProcess,IOPipe.hRead,GetCurrentProcess,@IOPipe.hRead,0,True,DUPLICATE_CLOSE_SOURCE OR DUPLICATE_SAME_ACCESS);
    if result then
      result := DuplicateHandle(GetCurrentProcess,IOPipe.hWrite,GetCurrentProcess,@IOPipe.hWrite,0,True,DUPLICATE_CLOSE_SOURCE OR DUPLICATE_SAME_ACCESS);
  end;

begin
  // initialize the Structure
  ZeroMemory(@StdIO, SizeOf(StdIO));
  // Create the input pipe
  result := CreateIOPipe( StdIo.stdIn );
  // Create the output pipe
  if result then
    result := CreateIOPipe( StdIo.stdOut );
  // Create the error pipe
  if result then
    result := CreateIOPipe( StdIo.stdError );
end;


// procedure CloseStdIOPipe
// Close the handles created by the CreateStdIOPipe function.
// After this procedure is called, the handles it contains ar no more
// valid and attempts to read from them will fail.

procedure CloseStdIOPipe(Var StdIO: TStdIO);
begin
  CloseHandle( StdIO.stdError.hRead );
  CloseHandle( StdIO.stdError.hWrite );

  CloseHandle( StdIO.stdIn.hRead );
  CloseHandle( StdIO.stdIn.hWrite );

  CloseHandle( StdIO.stdOut.hRead );
  CloseHandle( StdIO.stdOut.hWrite );

  // empty the structure to ensute that we are not going to read from the handles again
  ZeroMemory(@StdIO, SizeOf(StdIO));
end;

// function PipeExec
// Executes a program and redirect it's standard IO pipes to the pipes
// in StdIO.
function PipeExec(CommandLine, Path: String; EnvironementStrings: PChar; var StdIO: TStdIO; UserToken: THandle; ShowWindow: DWORD = SW_HIDE): TProcessInformation;
const
  ProcessCreationFlags: DWord = NORMAL_PRIORITY_CLASS;
var
  SI        : TStartupInfo;
  PathPChar : PChar;
begin
  // initialize the structure we are going to use
  Zeromemory(@SI, SizeOf(SI));
  Zeromemory(@result, SizeOf(result));
  // Fill the necessary fields
  SI.cb := sizeof(SI);                        // Size of the structure. The OS uses that to validat it
  SI.dwFlags  := STARTF_USESHOWWINDOW	or    // Use the wShowWindow field
                 STARTF_USESTDHANDLES;        // use the handles we created for the std IO pipes
  SI.wShowWindow := ShowWindow;               // Show the console or not...
  SI.hStdError := StdIO.stdError.hWrite;      // Write errors to the error pipe
  SI.hStdInput := StdIO.stdIn.hRead;          // read input from input pipe
  SI.hStdOutput := StdIO.stdOut.hWrite;       // Write Ouput to output pipe

  if length(path) > 0 then
     PathPChar := PChar(Path)
  else
      PathPChar := nil;

  if UserToken = 0 then
  begin
    if not CreateProcess( nil,                         // must be NIL for win16 apps under NT, including DOS progs
                   pchar(CommandLine),
                   nil,                         // Process security attibutes. Sue same as current
                   nil,                         // Thread security attibutes. Sue same as current
                   true,                        // Inherite handles. Must be true for IO redirection
                   ProcessCreationFlags,        // creation flags
                   EnvironementStrings,         // If using with a CGI aplication, you MUST pass the HTTP headers as env. strings in  this variable
                   PathPChar,                   // Directory of the new process
                   SI,                          // SISTEMINFO Structure used to initialize the new process
                   result)                     // PROCESINFORMATION structure used to control the newly created process
    then
      RaiseLastOSError;
  end
  else
  begin
    if not CreateProcessAsUser( UserToken,                // UserToken of desired user. That token must be retreived with LogonUser or DuplicatteToken from a Impersonation token
                         nil,                      // must be NIL for win16 apps under NT, including DOS progs
                         pchar(CommandLine),
                         nil,                      // Process security attibutes. Sue same as current
                         nil,                      // Thread security attibutes. Sue same as current
                         true,                     // Inherite handles. Must be true for IO redirection
                         ProcessCreationFlags,     // creation flags
                         EnvironementStrings,      // If using with a CGI aplication, you MUST pass the HTTP headers as env. strings in  this variable
                         PathPChar,                // Directory of the new process
                         SI,                       // SISTEMINFO Structure used to initialize the new process
                         result)                  // PROCESINFORMATION structure used to control the newly created process
    then
      RaiseLastOSError;
  end;
end;

// Function ReadPipe
// Read the content of the output pipe
Function ReadPipe(StdIo: TStdIO): string;
var
  BufferSize: DWORD;
  Buffer: PChar;
begin
  if StdIO.stdOut.hRead <> INVALID_HANDLE_VALUE then
  begin
    BufferSize := 0;
    // First, check the size of the current pipe buffer
    PeekNamedPipe( StdIO.stdOut.hRead,
                   nil,
                   0,
                   nil,
                   @BufferSize,
                   nil);
    // if there is data waiting, fetch it
    if BufferSize > 0 then
    begin
      // set the new length of the result and initialize it
      Buffer := StrAlloc(BufferSize + 1);
      try
        ZeroMemory(Buffer, BufferSize + 1);
        // Read all data from the pipe
        ReadFile(StdIO.stdOut.hRead, Buffer^, BufferSize, BufferSize, nil);
        SetLength(Result, BufferSize);
        CopyMemory(PChar(Result), Buffer, BufferSize);
      finally
        StrDispose(Buffer);
      end;
    end
    else
      Result := '';
  end
  else
    Result := '';
end;

// procedure WritePipe
// Write to the input pipe of the process.
function WritePipe(StdIo: TStdIO; const Data: AnsiString): DWORD;
begin
  Result := 0;
  if StdIO.stdIn.hWrite <> INVALID_HANDLE_VALUE then
  begin
    if not WriteFile(StdIO.stdIn.hWrite, Data[1], Length(data), result, nil) then
      Raise Exception.Create(SysErrorMessage(getLastError));
  end;
end;

// Function ReadPipe
// Read the content of the output pipe
function ReadError(StdIo: TStdIO): string;
var
  BufferSize: DWORD;
  Buffer: PChar;
begin
  if StdIO.stdError.hRead <> INVALID_HANDLE_VALUE then
  begin
    BufferSize := 0;
    // First, check the size of the current pipe buffer
    PeekNamedPipe( StdIO.stdError.hRead,
                   nil,
                   0,
                   nil,
                   @BufferSize,
                   nil);
    // if there is data waiting, fetch it
    if BufferSize > 0 then
    begin
      // set the new length of the result and initialize it
      SetLength(result, BufferSize + 1);
      ZeroMemory(PChar(result), BufferSize + 1);
      // Read all data from the pipe
      Buffer := PChar(Result);
      ReadFile (StdIO.stdError.hRead, Buffer, BufferSize, BufferSize, nil);
    end
    else
      Result := '';
  end
  else
    Result := '';
end;


procedure BuildEnvironementFromStringList(Src: TStrings; Dest: TMemoryStream);
var
  i: Integer;
  aLine: string;
  Buffer: Pointer;
  BufferSize: Cardinal;
  aChar: Char;
begin
  for i := 0 to Src.Count - 1 do
  begin
    aline := Trim(Src[i]);
    if Length(aLine) > 0 then
    begin
      BufferSize := Length(aLine) + 1;
      GetMem(Buffer, BufferSize);
      try
        ZeroMemory(Buffer, BufferSize);
        CopyMemory(Buffer, PChar(aLine),Length(aLine));
        Dest.Write(Buffer^, BufferSize);
      finally
        freeMem(Buffer);
      end;
    end;
  end;
  aChar := #0;
  Dest.WriteBuffer(aChar, 1);
  Dest.Position := 0;
end;
// function WatchProcessUntillOver
// This functions wraps all the others into a nice and easy interface.
// To use it: simply call it. It will return when the program terminated.
//
function WatchProcessUntillOver(CommandLine, Path, InitialInput: string; Environement: TStrings; Callback: TPipeLoopFunc; UserData: DWORD; UserToken: THandle; ShowWindow: DWORD = SW_HIDE): DWORD;
var
  StdIO: TStdIO;
  PI: TProcessInformation;
  WaitResult: DWord;
  Loop: Boolean;
  Input: string;
  Terminate: boolean;
  HProcess: Cardinal;              // Handle to the newly created process
  EnvironementData: TMemoryStream;
begin
  result := $FFFFFFFF; // error code
  // Create the pipe we will use
  if CreateStdIOPipe(StdIO) then
  try
    // Launch the program
    Terminate := false;
    if assigned( Environement ) then
    begin
      EnvironementData := TMemoryStream.create;
      try
        BuildEnvironementFromStringList(Environement, EnvironementData);
        PI := PipeExec(CommandLine, Path, EnvironementData.Memory, StdIO, UserToken, ShowWindow);
      finally
        EnvironementData.free;
      end;
    end
    else
      PI := PipeExec(CommandLine, Path, nil, StdIO, UserToken);
    if PI.hProcess <> 0 then
    begin
      try
        // Send the initial input
        if length(InitialInput) > 0 then
        begin
          WritePipe(StdIO, InitialInput);
        end;
        // read the buffer every 1/10 seconds
        Loop := true;
        while Loop do
        begin
          WaitResult := WaitForSingleObject(PI.hProcess, 100);
          if WaitResult = WAIT_TIMEOUT then
          begin
            Input := '';
            // the process is still running, fetch the buffer and use the callback
            Callback( ReadPipe(StdIO), Input, Terminate, PI, UserData);
            if Length( Input ) > 0 then
              WritePipe(StdIO, Input);
            // Check to see if we must terminate the process
            if Terminate then
            begin
              // Reopen the process with termination rights
              HProcess := OpenProcess(PROCESS_TERMINATE, true, PI.dwProcessId);
              TerminateProcess( HProcess, 9);
              Loop := false;
              Terminate := true;
            end;
          end
          else
          begin
            // process has terminated.
            Terminate := true;
            Loop := false;
            Input := '';
            // the process is still running, fetch the buffer and use the callback
            Callback( ReadPipe(StdIO), Input, Terminate, PI, UserData);
            // No need to write to the process, it is already dead.
            // Fetch the process exit code
            if not GetExitCodeProcess(PI.hProcess, Result) then
              RaiseLastWin32Error;
          end;
        end;
      finally
        CloseHandle(PI.hThread);
        CloseHandle(PI.hProcess);
      end;
    end
    else
      RaiseLastWin32Error;
  finally
    CloseStdIOPipe( StdIO );
  end;
end;

end.
